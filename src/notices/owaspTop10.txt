owasp top10-2021

AO1-2021:-Broken Access Controll - podatnosci z autoryzacja i rolami w aplikacji
A02-2021:-Cryptographic Failures - np. 'zatwardowklepany' klucz jwt (json web token)
A03-2021:-Injection -  SQL injection / XSS / template injection / HTML injection
A04-2021:-Insecure Design
A05-2021:-Security Misconfiguration
A06-2021:-Vulnerable and Outdated Components
A07-2021:-Identification and Authentication Failures
A08-2021:-Software and Data Integrity Failures
A09-2021:-Security Ligging and Monitoring Failures
A10-2021:-Server-Side Request Forgery (SSRF)


Ad A01-2021: https://owasp.org/www-community/Broken_Access_Control
application does not implement proper authorization of access to data; thus, application
users may access data of other users with read/write privileges.

Przykład ataku:
1. As user A sign into account, fetch user_id from /users/me endpoint
2. Register a new account and confirm email address
3. Fill the required forms
4. While sending PUT request intercept it and paste value copied from user A to account_id
param.

Jak sprawdzać czy jest się podatnym:
 - polityka dostępu powinna być jasno udokumentowana, jeśli jej nie ma jest to podatność
 - kod implementujący politykę dostępu powinien być sprawdzany
 - kod powinien być dobrze ustrukturyzowany, modularny i najprawdop. scentralizowany
 - cr kodu powinno być robione pod kątem poprawności walidacji i implementacji kontroli dostępu
 - powinno przeprowadzać się testy penetracyjne

Jak się bronić:
 - w miarę możliwości usunąć dostęp administracyjny przez stronę główną, metody zarządcze realizować przez dostęp po vpn.
 - podczas projektowania aplikacji myśleć o wymaganiach kontroli dostępu do aplikacji
 - mocno polecane jest użycie macieży zasad dostępu, zasób - dostęp
 - definiowanie polityki bezpieczeństwa, jaki user ma dostęp do zasobów i funkcji systemu
 - aplikacja nie powinna polegac na id przekazywanych w requestach dot. roli usera, zasobu etc.
 - przed uzyskaniem dost. do wewnetrznych zasobow trzeba zrobic takie zabezp. zeby nie można bylo omijać tych zabezp.
 - zabezpieczyć przed Path Traversal - czyli mozliwości eksploracji plikow podając scieżki typu ../../file w request
 - korzystac  z uprawnien oferowanych przez os systemu gdzie lezy aplikacja, dawac bardzo ograniczone prawa do plikow aplikacji.
 - aplikacja nie powinna pozwalać na cachowanie wrażliwych informacji na komputerach użytkowników.

- projektowac aplikacje tak aby niemozliwa była modyfikacja zasobów innych użytkowników, np. przez podmiane id nieswojego zasobu
- przykład rejestracja usera, można zmienić account_id  i dodac nowego usera z uprawnieniami admina.
- najczęstszymi celami są strony zarządzające aplikacją (backend) bo tam loguje się admin, te strony powinny być szczególnie chronione
- brak przemyślanej polityki dostępów do zasobów aplikacji -> chaos z regułami dostępowymi.


Ad A02:2021 – Cryptographic Failuresicon: https://owasp.org/Top10/A02_2021-Cryptographic_Failures/
the focus is on failures related to cryptography (or lack thereof). Which often lead to exposure of sensitive data.
hardcoded password, use broke on risky crypto algo.

* Zdefiniowanie danych wrażliwych w aplikacji:
- hasla
- numery kart kredytowych
- dane GDPR
- dane finansowe etc.
* Identyfikacja jak przesyłane są dane wrażliwe w systemie, aby nie otwartym tekstem
* Sprawdzenie czy nie używamy przestażałych albo podatnych algo kryptograficznych w systemie
* Wprowadzenie polityki odświeżania kluczy kryptograficznych
* Właczenie https
* spr. czy cert. strony jest prawidłowo zwalidoway
* spr. czy zastosowane metody hashujace sa wystarczajaco dobre
* nie używać MD5 oraz SHA1
* nie przechowywać wrażliwych danych gdy są one niepotrzebne, należy je usunąć.
* wyłączyć cachowanie w responsach dla wrażliwych danych
* Zastosuj wymagane środki bezpieczeństwa zgodnie z klasyfikacją danych.
* nie używać starych protokołów do przesyłania wrażliwych danych FTP, SMTP
* Store passwords using strong adaptive and salted hashing functions with a work factor (delay factor), such as Argon2, scrypt, bcrypt or PBKDF2.
* Always use authenticated encryption instead of just encryption.
* Klucze powinny być losowo generowane kryptograficznie i przechowywane w pamięci jako tablice bajtów.
  Jeśli używane jest hasło, należy je przekonwertować na klucz za pomocą odpowiedniej funkcji wyprowadzania klucza bazy hasła.

Ad A03-2021:-Injection: https://owasp.org/Top10/A03_2021-Injection/
Aplikacja jest podatna na atak gdy :
* dane wprowadzane do aplikacji nie są : walidowane, oczyszczane , filtrowane
* zapytania dynamiczne z parametrami są używane bezpośrednio , parametry nie są sprawdzne filtrowane etc.
* Wrogie dane są używane w parametrach wyszukiwania mapowania obiektowo-relacyjnego (ORM) w celu wyodrębnienia dodatkowych, wrażliwych rekordów.
* Source code review is the best method of detecting if applications are vulnerable to injections.
* Automated testing of all parameters, headers, URL, cookies, JSON, SOAP, and XML data inputs is strongly encouraged

Jak się bronić :
* Preventing injection requires keeping data separate from commands and queries:
** The preferred option is to use a safe API, which avoids using the interpreter entirely, provides a parameterized interface, or migrates to Object Relational Mapping Tools (ORMs).
** Use positive server-side input validation. This is not a complete defense as many applications require special characters, such as text areas or APIs for mobile applications.
** For any residual dynamic queries, escape special characters using the specific escape syntax for that interpreter.
** Use LIMIT and other SQL controls within queries to prevent mass disclosure of records in case of SQL injection.


Ad A04-2021:-Insecure Design: https://owasp.org/Top10/A04_2021-Insecure_Design/

Def. Insecure design is a broad category representing different weaknesses, expressed as “missing or ineffective control design.”
There is a difference between insecure design and insecure implementation.

Jednym z czynników, które przyczyniają się do niepewnego projektowania,
jest brak profilowania ryzyka biznesowego nieodłącznie związanego z opracowywanym oprogramowaniem lub systemem,
a tym samym brak określenia, jaki poziom projektowania zabezpieczeń jest wymagany.

Jak się bronić :

* Ustanów bezpieczny cykl rozwoju i korzystaj z niego wraz ze specjalistami AppSec, aby pomóc ocenić i zaprojektować zabezpieczenia i kontrole związane z prywatnością

* Stwórz i korzystaj z biblioteki bezpiecznych wzorców projektowych lub gotowych do użycia utwardzonych dróg

* Używaj modelowania zagrożeń do krytycznego uwierzytelniania, kontroli dostępu, logiki biznesowej i przepływów kluczy

* Zintegruj język bezpieczeństwa i elementy sterujące z historyjkami użytkownika

* Zintegruj kontrole wiarygodności na każdym poziomie aplikacji (od frontendu do backendu)

* Napisz testy jednostkowe i integracyjne, aby sprawdzić, czy wszystkie krytyczne przepływy są odporne na model zagrożeń. Kompiluj przypadki użycia i przypadki niewłaściwego użycia dla każdej warstwy aplikacji.

* Segreguj warstwy warstw w warstwach systemu i sieci w zależności od narażenia i potrzeb w zakresie ochrony

* Solidnie segreguj najemców zgodnie z projektem na wszystkich poziomach

* Ogranicz zużycie zasobów przez użytkownika lub usługę




A05:2021 – Security Misconfiguration: https://owasp.org/Top10/A05_2021-Security_Misconfiguration/

Aplikacja może być zagrożona, jeśli aplikacja jest:

* Brak odpowiedniego wzmocnienia zabezpieczeń w dowolnej części stosu aplikacji lub nieprawidłowo skonfigurowane
  uprawnienia w usługach w chmurze.
* Włączone lub zainstalowane są niepotrzebne funkcje
  (np. niepotrzebne porty, usługi, strony, konta lub uprawnienia).
* Konta domyślne i ich hasła są nadal włączone i niezmienione.
* Obsługa błędów ujawnia użytkownikom ślady stosu lub inne zbyt pouczające komunikaty o błędach.
* W przypadku zaktualizowanych systemów najnowsze funkcje zabezpieczeń są wyłączone lub nie są bezpiecznie skonfigurowane.
* Ustawienia zabezpieczeń na serwerach aplikacji, frameworkach aplikacji (np. Struts, Spring, ASP.NET),
  bibliotekach, bazach danych itp. nie są ustawione na bezpieczne wartości.
* Serwer nie wysyła nagłówków ani dyrektyw bezpieczeństwa lub nie są one ustawione na bezpieczne wartości.

Jak zapobiegać:
* stosować powtarzalny proces deploy na róznych środowiiskach , srodowiska powinny byc skonfigurowane identycznie
  ale różnić się credentialami
* usuwać nieużywane składniki frameworków, komponentów etc. nic co nie jest potrzebne lepiej żeby nie było zainstalowane
* dbać o rewiew konfiguracji oraz uaktualnienia i aktualizacje security
* architektura segmentowa pomaga w zapewnieniu bezp.
* zautomatyzowany proces do weryfikacji efektywności configuracji oraz ustawień na wszystkich środowiskach



Ad A06:2021 – Vulnerable and Outdated Components: https://owasp.org/Top10/A06_2021-Vulnerable_and_Outdated_Components/

Every organization must ensure an ongoing plan for monitoring, triaging, and applying updates or configuration changes for the lifetime of the application or portfolio.

Jesteś podatny gdy:
* nie wiesz jakich wersji uzywach po stronie serwerowej i w aplikacji
* uzywane oprogramowanie ktorego uzywasz jest w starej wersji lub niewspierane
* jesli nie śledzisz biuletynów o podatnosciach swojego opogramowania
* jesli nie aktualizujesz swojego oprogramowania , frameworkiserwery etc.
* jesli software dev nie testuja kompatybilnosci z aktualizacjami bibliotek ktore stosują
* jesli nie dbasz o zabezpieczenie konfiguracji

Jak zapobiegac :
* usun nieużywane zależnosci z kodu , stare nieużywane kompondnty, pliki, dokumentacje etc.
* prowadz ciagla inwentaryzacje versji swojego oporogramowania , uzywanego i wytwarzanego
* uzysuj komponenty wspierajace tylko z oficjalnych zrodel , najlepiej jeszcze jak sa podpisane certami.
* monitoruj komponenty pod katem aktualizacji, patch-y i poprawek



Ad A07:2021 – Identification and Authentication Failures : https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures/

Aplikacja jest podatna gdy:
* pozwala na ataki typu słownikowego
* pozawa na ataki typu brute force
* pozwala na tworzenie slabych loginow i/lub haseł typu: Password1
* używa słabych lub nieefektywnych narzędzi do przywracania haseł
* przechowuje hasla i loginy plain textem lub slabo hashowanym algo.
* id sesji jest widoczny w urlu (!)
* nie ma wieloetapowego procesu autentykacji
* reużycie id sesji po sukcesie logowania
* po zakonczeniu sesji niepoprawne usuwanie id sesji oraz/lub/i tokenów itd.

Jak zapobiegać:

* gdy to możliwe używać wieloetapowego procesu logowania - autentykacji
* nie rób deploy z haslem i loginem admina
* zaimplementuj sprawdzanie wspisywanych hasel pod katem "the top 10000 weak passwords"
* wprowadz koniecznosc wpisywania dluzszego hasla , zastosuj polityke zmian hasel w odstepach czasu
* zapewnij bezpieczenstwo rejestracji usera, odzyskiwania hasel
* zaimplementuj limit nieudanych logowań ale nie przesadź żeby nie wyszo że cieżko się dostać do aplikacji np 10 prób
nieudane próby logowania monitoruj jesli przekroczhy limit logowan powiadamianie admina etc.
* uzywanie sesji po stronie serwera, identyfikator sesji nie moze byc widoczny w url-ach




Ad A08:2021 – Software and Data Integrity Failures : https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures/

Podatność zwiazana z CI/CD , jak użwasz narzędzia CI/CD i/lub pluginow do CI/CD z nieznanych źródeł to ktoś może się wbić
na pipeliny, podłożyc jakiegoś exploita etc.

Jak zapobiegać :

* używanie podpisów lub czegoś podobnego że soft jest z pewnego źródła do CI/CD
* zapewnienie że biblioteki / zależności są pobierane z zaufanych repo
* zapewnienie że używane biblioteki / komponenty nie mają znanych podatności
* zapewnienie review i review konfiguracji kodu
* CI/CD pipeline ma miec wlasciwą segregację, configurację i kontrolę dostępu aby przeprowadzac bezpieczny proces budowy
 np. stosowac innego niz admin usera do wykonywania buildow
* nie wysyłan niezabezpieczonych / niezaszyfrowanych danch podczas buildu




A09:2021 – Security Logging and Monitoring Failures: https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/

Returning to the OWASP Top 10 2021, this category is to help detect, escalate, and respond to active breaches.
Without logging and monitoring, breaches cannot be detected.
Insufficient logging, detection, monitoring, and active response occurs any time:

Niewystarczające logowanie, albo jego brak, nie wiadomo co się dzieje w aplikacji. Jakie spadają błędy.
Aplikacja jest podatna gdy nie ma logowania :
* logowań userów, nieudanych logowań , transakcji wysokowartościowych - dziwnych
* błędów i warningów
* logi są przechowywane lokalnie (!)
* pentesty nie wszczynają alarmów w monitoringu
* aplikacja nie potrafi wykryć ataków, wyeskalowac i zawiadomić o nich

Jak przeciwdziałać :
* zapewnienie logowania : loginów , dostępów, błędów , warningów etc.
* logi mają być w formacie łatwym do "zjedzenia" przez aplikacje nadzorujące
* dane logów maja byc zabezpieczone lub zanonimizowane
* duże transakcje np. w db np. usuwanie wszystkiego powinny być podejżane i zgłaszane
* dev ops ma możliwoś aktywnego śledzenia tego co się dzieje w systemie
* mieć plan naprawczy na wypadek przywracania danych





A10:2021 – Server-Side Request Forgery (SSRF) :  https://owasp.org/Top10/A10_2021-Server-Side_Request_Forgery_%28SSRF%29/

Wykonywanie zadań po stronie serwera, nieporządanych zadań, np.

 mechanizmów pozwalających pobierać pliki z zewnętrznych źródeł,
 niezależnie od języka programowania, więc można go spotkać w PHP, Pythonie, Javie itp.
Chodzi mianowicie o adresy prowadzące do plików na lokalnym dysku twardym, tj. np. file:///etc/passwd.
Jeśli aplikacja nie zabezpieczy się w żaden sposób przed wykonywaniem tego typu żądań i pozwala na wyświetlanie zawartości pobranego pliku,
ze strony atakującego jest to „easy-win”, bo zyskuje w ten sposób podatność pozwalającą na pobieranie dowolnych plików z dysku,
na którym zahostowana jest aplikacja. W zależności od użytej technologii mogą być też dostępne inne schematy URL-i,
które pozwolą na osiągnięcie tego samego efektu.
W przypadku Javy, na przykład, pliki z dysku można też pobrać URL-em: netdoc://etc/passwd.

Jak zabezpieczać ?

From Network layer
* Segment remote resource access functionality in separate networks to reduce the impact of SSRF
* Enforce “deny by default” firewall policies or network access control rules to block all but essential intranet traffic.

From Application layer:
* Sanitize and validate all client-supplied input data
* Enforce the URL schema, port, and destination with a positive allow list
* Do not send raw responses to clients
* Disable HTTP redirections
* Be aware of the URL consistency to avoid attacks such as DNS rebinding and “time of check, time of use” (TOCTOU) race conditions


Stąd wypływa wniosek, że jedyną prawdziwie skuteczną metodą ochrony przed skanowaniem sieci lokalnej
jest ustawienie odpowiednich reguł na firewallach.
Host, z którego będą wykonywane żądania,
powinien mieć zablokowaną możliwość wykonywania połączeń wychodzących do innych maszyn w LAN-ie.

Podatność Server-Side Request Forgery (SSRF) pozwala osobom przeprowadzającym ataki z
Internetu na wykonywanie skanowania lub pobierania zasobów z sieci lokalnej.
Ochrona przed tego typu atakami nie jest prosta.
 Przede wszystkim nie należy pozwalać na pobieranie zasobów ze schematów innych niż http/https.
 Ponadto, najlepiej posiadać w sieci lokalnej specjalny host,
 z którego będą wykonywane zapytania do zewnętrznych serwerów,
  i w konfiguracji firewalla uniemożliwić temu hostowi wykonywanie połączeń wychodzących do innych hostów w sieci lokalnej.