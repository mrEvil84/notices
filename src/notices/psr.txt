PHP Standard Recommendation – zbiór dokumentów określających różne standardy używane w języku PHP, np.:

PSR-1, PSR-2, PSR-12 – standardy dot. kodowania
PSR-0, PSR-4 – standardy dot. autoloadingu

PSR-0 działa na zasadzie struktury katalogowej, która odzwierciedla namespace’y,
PSR-4 pozwala na dostosowanie struktury katalogowej podczas autoloadingu,
      wielkosc liter w sciezce ma znaczenie ,
      można mieć wiele ścieżek do wielu projektow , np kilka prefiksow do kilku katalogow
      mozna do jednego prefiksu dodawac po kilka sciezek



PSR-2

Visibility MUST be declared on all properties and methods;
- abstract and final MUST be declared before the visibility;
- static MUST be declared after the visibility.


PSR-0 a PSR-4

In PSR-4 autoload the path to directory will be like App\Controller\IndexController --> dir/IndexController.php.
In PSR-0 autoload will be                            App\Controller\IndexController -->dir/App/Controller/IndexController.php.


* W nowszym standardzie plik może być w kilku lokalizacjach. Korzystamy też z kolejki autoloaderów.

* Nazwy klas zapisujemy identycznie jak w PSR-0 ale znak podkreślenia nie ma już specjalnego znaczenia. Zrywamy więc z kompatybilnością z PHP 5.2 i starszymi.

* Najważniejsza zmiana to sposób traktowania ścieżki do projektu.
* Tym razem, zamiast jednej możemy mieć wiele ścieżek, każda zdefiniowana dla jakiegoś prefiksu nazwy klasy. Np.

\Adam\ProjektPierwszy => /vendor/Adam/ProjektA/src/php
\Adam\ProjektDrugi => /vendor/Adam/ProjektB/classes/

Co więcej, możemy przypisać kilka ścieżek do jednego prefiksu:

\Adam\ModułPierwszy => /vendor/Adam/ProjektA/src/php
\Adam\ModulPierwszy => /vendor/Adam/PoprawkiDoProjektuA/php/classes

Autoloader gdy już dopasuje prefiks nazwy do jakiejś ścieżki traktuje resztę nazwy w klasyczny sposób – rozbija na podkatalogi i szuka pliku php.

Tym razem jednak autoloader może nie znaleźć pliku za pierwszym razem.
Dopiero, gdy przeszuka wszystkie ścieżki dla naszego prefiksu może zgłosić niepowodzenie.

W poniższym przykładzie, jeśli będziemy szukać klasy o nazwie:

\Adam\ModułPierwszy\SubModul\Klasa

to autoloader będzie spodziewał się, że znajdzie plik Klasa.php w jednej z dwóch lokalizacji:

/vendor/Adam/ProjektA/src/php/SubModul/Klasa.php
/vendor/Adam/PoprawkiDoProjektuA/php/classes/SubModul/Klasa.php

Kilka dodatkowych warunków w PSR-4 mówi o tym,
że wielkość liter w nazwach klas jest rozróżniana (inaczej niż w PSR-0) oraz,
że dla każdej klasy musi być zdefiniowany jakiś katalog pasujący do jej prefiksu.